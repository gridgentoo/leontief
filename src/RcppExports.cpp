// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// input_requirement_matrix
arma::mat input_requirement_matrix(const arma::mat& X, const arma::vec& d);
RcppExport SEXP _inputoutput_input_requirement_matrix(SEXP XSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(input_requirement_matrix(X, d));
    return rcpp_result_gen;
END_RCPP
}
// output_allocation_matrix
arma::mat output_allocation_matrix(const arma::mat& X, const arma::vec& d);
RcppExport SEXP _inputoutput_output_allocation_matrix(SEXP XSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(output_allocation_matrix(X, d));
    return rcpp_result_gen;
END_RCPP
}
// leontief_inverse
arma::mat leontief_inverse(const arma::mat& A);
RcppExport SEXP _inputoutput_leontief_inverse(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(leontief_inverse(A));
    return rcpp_result_gen;
END_RCPP
}
// ghosh_inverse
arma::mat ghosh_inverse(const arma::mat& B);
RcppExport SEXP _inputoutput_ghosh_inverse(SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(ghosh_inverse(B));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_inputoutput_input_requirement_matrix", (DL_FUNC) &_inputoutput_input_requirement_matrix, 2},
    {"_inputoutput_output_allocation_matrix", (DL_FUNC) &_inputoutput_output_allocation_matrix, 2},
    {"_inputoutput_leontief_inverse", (DL_FUNC) &_inputoutput_leontief_inverse, 1},
    {"_inputoutput_ghosh_inverse", (DL_FUNC) &_inputoutput_ghosh_inverse, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_inputoutput(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
